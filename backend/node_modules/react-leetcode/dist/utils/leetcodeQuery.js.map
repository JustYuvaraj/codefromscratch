{"version":3,"file":"leetcodeQuery.js","sources":["../../src/utils/leetcodeQuery.ts"],"sourcesContent":["import type { \r\n    ContestInfo,\r\n    HeatMapDetail,\r\n    MatchedUser, \r\n    RecentSubmission, \r\n    SubmitStats, \r\n    UserContestInfo \r\n} from '../types';\r\n\r\nimport {\r\n    profileQuery,\r\n    contestDetailsQuery,\r\n    solvedProblemsStatsQuery,\r\n    recentSubmissionQuery,\r\n    heatMapQuery\r\n} from './queries'\r\n\r\n/**\r\n * Represents a class for querying user data from LeetCode.\r\n */\r\nexport class LeetcodeQuery {\r\n\r\n    /**\r\n     * Fetches data from the LeetCode Graphql endpoint.\r\n     * @param {string} query - The GraphQL query string.\r\n     * @param {string} username - The username for which to fetch the data.\r\n     * @returns A promise resolving to the fetched data.\r\n     * @private\r\n     */\r\n    private async fetchData(query: string, username: string) {\r\n        let url = '/leetcode';\r\n\r\n        if(import.meta.env.MODE === 'test') {\r\n            url = 'https://leetcode.com/graphql';\r\n        }\r\n\r\n        const res = await fetch(url, {\r\n            method: 'POST',\r\n            mode: 'cors',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                Referer: 'https://leetcode.com',\r\n                'Access-Control-Allow-Origin': '*'\r\n            },\r\n            body: JSON.stringify({ \r\n                query: query, \r\n                variables: { \r\n                    username: username, \r\n                } \r\n            }),\r\n        })\r\n\r\n        return res.json();\r\n    }\r\n\r\n    /**\r\n     * Fetches the user profile data.\r\n     * @param {string} userName - The username of the user.\r\n     * @returns {Promise<MatchedUser>} A promise resolving to the user profile data.\r\n     */\r\n    async fetchUserProfile(userName: string) : Promise<MatchedUser>{\r\n        const { data } = await this.fetchData(profileQuery, userName);\r\n        return data.matchedUser;\r\n    }\r\n\r\n    /**\r\n     * Fetches details of the user's contest participation.\r\n     * @param {string} userName - The username of the user.\r\n     * @returns {Promise<UserContestInfo>} A promise resolving to the user's contest details.\r\n     */\r\n    async fetchUserContestDetails(userName: string): Promise<UserContestInfo> {\r\n        const { data } = await this.fetchData(contestDetailsQuery, userName);\r\n        const contestDetail = {} as UserContestInfo;\r\n        \r\n        contestDetail.userContestRanking = data.userContestRanking;\r\n        contestDetail.userContestRankingHistory = (data.userContestRankingHistory as Array<ContestInfo>).filter((info) => info.attended);\r\n\r\n        return contestDetail;\r\n    }\r\n\r\n    /**\r\n     * Fetches statistics of the user's solved problems.\r\n     * @param {string} userName - The username of the user.\r\n     * @returns {Promise<SubmitStats>} A promise resolving to the user's solved problems statistics.\r\n     */\r\n    async fetchUserSolvedProblemsStats(userName: string): Promise<SubmitStats> {\r\n        const { data } = await this.fetchData(solvedProblemsStatsQuery, userName);\r\n        const stats = {} as SubmitStats;\r\n\r\n        stats.allQuestionsCount = data.allQuestionsCount;\r\n        stats.acSubmissionNum = data.matchedUser.submitStats.acSubmissionNum;\r\n        stats.rank = data.matchedUser.profile.ranking\r\n    \r\n        return stats;\r\n    }\r\n\r\n    /**\r\n     * Fetches the user's recent submissions.\r\n     * @param {string} userName - The username of the user.\r\n     * @returns {Promise<RecentSubmission[]>} A promise resolving to an array of recent submissions.\r\n     */\r\n    async fetchUserRecentSubmissions(userName: string): Promise<RecentSubmission[]> {\r\n        const { data } = await this.fetchData(recentSubmissionQuery, userName);\r\n        return data.recentSubmissionList;\r\n    }\r\n\r\n    /**\r\n     * Fetches the user's heatmap data.\r\n     * @param {string} userName - The username of the user.\r\n     * @returns {Promise<HeatMapDetail[]>} A promise resolving to an array of heatmap details.\r\n     */\r\n    async fetchUserHeatMap(userName: string): Promise<HeatMapDetail[]>{\r\n        const { data } =  await this.fetchData(heatMapQuery, userName);\r\n        const json_string = data.matchedUser.submissionCalendar;\r\n\r\n        const submissionCalendar = JSON.parse(json_string);\r\n\r\n        const heatMap:HeatMapDetail[] = new Array(365);\r\n        const today = Math.floor(Date.now() / 86400_000) * 86400;\r\n\r\n        for(let i = 0; i < 364; i++) {\r\n            const timestamp = today - i * 86400\r\n            const count = submissionCalendar[timestamp] || 0;\r\n            \r\n            const newDate = new Date(timestamp*1000).toLocaleString().split(',')[0];\r\n            heatMap[i] = {date: newDate, submissionCount: count}\r\n        }\r\n        \r\n        return heatMap;\r\n    }\r\n}\r\n\r\n\r\nexport default new LeetcodeQuery();"],"names":["LeetcodeQuery","query","username","userName","data","profileQuery","contestDetailsQuery","contestDetail","info","solvedProblemsStatsQuery","stats","recentSubmissionQuery","heatMapQuery","json_string","submissionCalendar","heatMap","today","i","timestamp","count","newDate","leetcodeQuery"],"mappings":";AAoBO,MAAMA,EAAc;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASvB,MAAc,UAAUC,GAAeC,GAAkB;AAuBrD,YAhBY,MAAM,MANR,aAMmB;AAAA,MACzB,QAAQ;AAAA,MACR,MAAM;AAAA,MACN,SAAS;AAAA,QACL,gBAAgB;AAAA,QAChB,SAAS;AAAA,QACT,+BAA+B;AAAA,MACnC;AAAA,MACA,MAAM,KAAK,UAAU;AAAA,QACjB,OAAAD;AAAA,QACA,WAAW;AAAA,UACP,UAAAC;AAAA,QACJ;AAAA,MAAA,CACH;AAAA,IAAA,CACJ,GAEU;EACf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,iBAAiBC,GAAwC;AAC3D,UAAM,EAAE,MAAAC,EAAK,IAAI,MAAM,KAAK,UAAUC,GAAcF,CAAQ;AAC5D,WAAOC,EAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,wBAAwBD,GAA4C;AACtE,UAAM,EAAE,MAAAC,EAAK,IAAI,MAAM,KAAK,UAAUE,GAAqBH,CAAQ,GAC7DI,IAAgB,CAAA;AAEtB,WAAAA,EAAc,qBAAqBH,EAAK,oBACxCG,EAAc,4BAA6BH,EAAK,0BAAiD,OAAO,CAACI,MAASA,EAAK,QAAQ,GAExHD;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,6BAA6BJ,GAAwC;AACvE,UAAM,EAAE,MAAAC,EAAK,IAAI,MAAM,KAAK,UAAUK,GAA0BN,CAAQ,GAClEO,IAAQ,CAAA;AAEd,WAAAA,EAAM,oBAAoBN,EAAK,mBACzBM,EAAA,kBAAkBN,EAAK,YAAY,YAAY,iBAC/CM,EAAA,OAAON,EAAK,YAAY,QAAQ,SAE/BM;AAAA,EACX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,2BAA2BP,GAA+C;AAC5E,UAAM,EAAE,MAAAC,EAAK,IAAI,MAAM,KAAK,UAAUO,GAAuBR,CAAQ;AACrE,WAAOC,EAAK;AAAA,EAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,MAAM,iBAAiBD,GAA2C;AAC9D,UAAM,EAAE,MAAAC,EAAK,IAAK,MAAM,KAAK,UAAUQ,GAAcT,CAAQ,GACvDU,IAAcT,EAAK,YAAY,oBAE/BU,IAAqB,KAAK,MAAMD,CAAW,GAE3CE,IAA0B,IAAI,MAAM,GAAG,GACvCC,IAAQ,KAAK,MAAM,KAAK,QAAQ,KAAS,IAAI;AAEnD,aAAQC,IAAI,GAAGA,IAAI,KAAKA,KAAK;AACnB,YAAAC,IAAYF,IAAQC,IAAI,OACxBE,IAAQL,EAAmBI,CAAS,KAAK,GAEzCE,IAAU,IAAI,KAAKF,IAAU,GAAI,EAAE,eAAA,EAAiB,MAAM,GAAG,EAAE,CAAC;AACtE,MAAAH,EAAQE,CAAC,IAAI,EAAC,MAAMG,GAAS,iBAAiBD;IAClD;AAEO,WAAAJ;AAAA,EACX;AACJ;AAGA,MAAeM,IAAA,IAAIrB,EAAc;"}