import { profileQuery as l, contestDetailsQuery as h, solvedProblemsStatsQuery as d, recentSubmissionQuery as m, heatMapQuery as f } from "./queries.js";
class y {
  /**
   * Fetches data from the LeetCode Graphql endpoint.
   * @param {string} query - The GraphQL query string.
   * @param {string} username - The username for which to fetch the data.
   * @returns A promise resolving to the fetched data.
   * @private
   */
  async fetchData(e, t) {
    return (await fetch("/leetcode", {
      method: "POST",
      mode: "cors",
      headers: {
        "Content-Type": "application/json",
        Referer: "https://leetcode.com",
        "Access-Control-Allow-Origin": "*"
      },
      body: JSON.stringify({
        query: e,
        variables: {
          username: t
        }
      })
    })).json();
  }
  /**
   * Fetches the user profile data.
   * @param {string} userName - The username of the user.
   * @returns {Promise<MatchedUser>} A promise resolving to the user profile data.
   */
  async fetchUserProfile(e) {
    const { data: t } = await this.fetchData(l, e);
    return t.matchedUser;
  }
  /**
   * Fetches details of the user's contest participation.
   * @param {string} userName - The username of the user.
   * @returns {Promise<UserContestInfo>} A promise resolving to the user's contest details.
   */
  async fetchUserContestDetails(e) {
    const { data: t } = await this.fetchData(h, e), s = {};
    return s.userContestRanking = t.userContestRanking, s.userContestRankingHistory = t.userContestRankingHistory.filter((a) => a.attended), s;
  }
  /**
   * Fetches statistics of the user's solved problems.
   * @param {string} userName - The username of the user.
   * @returns {Promise<SubmitStats>} A promise resolving to the user's solved problems statistics.
   */
  async fetchUserSolvedProblemsStats(e) {
    const { data: t } = await this.fetchData(d, e), s = {};
    return s.allQuestionsCount = t.allQuestionsCount, s.acSubmissionNum = t.matchedUser.submitStats.acSubmissionNum, s.rank = t.matchedUser.profile.ranking, s;
  }
  /**
   * Fetches the user's recent submissions.
   * @param {string} userName - The username of the user.
   * @returns {Promise<RecentSubmission[]>} A promise resolving to an array of recent submissions.
   */
  async fetchUserRecentSubmissions(e) {
    const { data: t } = await this.fetchData(m, e);
    return t.recentSubmissionList;
  }
  /**
   * Fetches the user's heatmap data.
   * @param {string} userName - The username of the user.
   * @returns {Promise<HeatMapDetail[]>} A promise resolving to an array of heatmap details.
   */
  async fetchUserHeatMap(e) {
    const { data: t } = await this.fetchData(f, e), s = t.matchedUser.submissionCalendar, a = JSON.parse(s), o = new Array(365), i = Math.floor(Date.now() / 864e5) * 86400;
    for (let n = 0; n < 364; n++) {
      const r = i - n * 86400, c = a[r] || 0, u = new Date(r * 1e3).toLocaleString().split(",")[0];
      o[n] = { date: u, submissionCount: c };
    }
    return o;
  }
}
const S = new y();
export {
  y as LeetcodeQuery,
  S as default
};
//# sourceMappingURL=leetcodeQuery.js.map
