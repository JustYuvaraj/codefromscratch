{"version":3,"file":"recentSubmission.js","sources":["../../../src/components/recentSubmissions/recentSubmission.tsx"],"sourcesContent":["import { forwardRef, memo, useCallback } from \"react\";\r\nimport leetcodeQuery from \"../../utils/leetcodeQuery\";\r\nimport { useFetch } from \"../../hooks\";\r\nimport { RecentSubmission as TRecentSubmission } from \"../../types\";\r\nimport LoadingOrError from \"../LoadingOrError\";\r\nimport '../../index.css';\r\nexport type Props = {\r\n    userName: string,\r\n    loadingComponent?: JSX.Element\r\n    theme?: {\r\n        primaryColor?: string;\r\n        secondaryColor?: string;\r\n        bgColor?: string;\r\n    },\r\n}\r\n\r\n/**\r\n * Component for displaying recent submissions of a user.\r\n * @param {object} props - The props object.\r\n * @param {React.Ref<HTMLDivElement>} ref - The ref to attach to the component's root element.\r\n * @param {string} props.userName - The username of the user.\r\n * @param {JSX.Element} [props.loadingComponent] - The loading component to display.\r\n * @param {object} [props.theme] - The theme configuration.\r\n * @param {string} [props.theme.primaryColor=\"rgba(34,211,238,1)\"] - The primary color.\r\n * @param {string} [props.theme.secondaryColor=\"rgba(209,213,219,1)\"] - The secondary color.\r\n * @param {string} [props.theme.bgColor=\"rgba(68,64,60,1)\"] - The background color.\r\n * @returns {JSX.Element} The JSX element representing the recent submissions component.\r\n */\r\nconst RecentSubmission = forwardRef<HTMLDivElement, Props>(({\r\n    userName,\r\n    loadingComponent,\r\n    theme = {\r\n        primaryColor: \"rgba(34,211,238,1)\",\r\n        secondaryColor: \"rgba(209,213,219,1)\",\r\n        bgColor: \"rgba(68,64,60,1)\"\r\n    },\r\n}, ref) => {\r\n\r\n    const fetchData = useCallback(() => {\r\n        return leetcodeQuery.fetchUserRecentSubmissions(userName);\r\n    }, [userName])\r\n\r\n    const { data, loading: isLoading, error } = useFetch<TRecentSubmission[]>(fetchData);\r\n\r\n    if (isLoading || error || !data) {\r\n        return (\r\n            <LoadingOrError\r\n                loading={isLoading}\r\n                error={error}\r\n                loadingComponent={loadingComponent}\r\n            />\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div\r\n            id=\"recent-submissions_container\"\r\n            ref={ref}\r\n            className=\"p-2 w-full\"\r\n        >\r\n            <div className=\"flex flex-col w-full h-full\">\r\n                <div style={{\r\n                    color: theme.secondaryColor\r\n                }} className=\"flex items-center justify-between w-full\">\r\n                    <h2 className=\"text-lg font-bold\">Recent Submissions</h2>\r\n                </div>\r\n                <div\r\n                    id=\"recent-submissions_list\"\r\n                    className=\"w-full h-full mt-2\"\r\n                >\r\n                    {data.map((submission: TRecentSubmission, i: number) => (\r\n                        <div key={i} style={{\r\n                            backgroundColor: theme.bgColor,\r\n                            color: theme.secondaryColor\r\n                        }} className=\"flex items-center justify-between w-full h-10 mt-2 px-2 py-1 rounded-md recent_submission_tile\">\r\n                            <div className=\"flex items-center\">\r\n                                <div className={`w-4 h-4 rounded-full ${submission.statusDisplay === \"Accepted\" ? \"bg-green-500\" : \"bg-red-500\"} `} />\r\n                                <p style={{\r\n                                    color: theme.primaryColor\r\n                                }} className=\"ml-2 text-sm\">{submission.title}</p>\r\n                            </div>\r\n                            <p className=\"text-xs\">{submission.statusDisplay}</p>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst MemoizedRecentSubmission = memo(RecentSubmission);\r\n\r\nexport default MemoizedRecentSubmission;"],"names":["RecentSubmission","forwardRef","userName","loadingComponent","theme","ref","fetchData","useCallback","leetcodeQuery","data","isLoading","error","useFetch","jsx","LoadingOrError","jsxs","submission","i","MemoizedRecentSubmission","memo"],"mappings":";;;;;AA4BA,MAAMA,IAAmBC,EAAkC,CAAC;AAAA,EACxD,UAAAC;AAAA,EACA,kBAAAC;AAAA,EACA,OAAAC,IAAQ;AAAA,IACJ,cAAc;AAAA,IACd,gBAAgB;AAAA,IAChB,SAAS;AAAA,EACb;AACJ,GAAGC,MAAQ;AAED,QAAAC,IAAYC,EAAY,MACnBC,EAAc,2BAA2BN,CAAQ,GACzD,CAACA,CAAQ,CAAC,GAEP,EAAE,MAAAO,GAAM,SAASC,GAAW,OAAAC,MAAUC,EAA8BN,CAAS;AAE/E,SAAAI,KAAaC,KAAS,CAACF,IAEnBI,gBAAAA,EAAA;AAAA,IAACC;AAAAA,IAAA;AAAA,MACG,SAASJ;AAAA,MACT,OAAAC;AAAA,MACA,kBAAAR;AAAA,IAAA;AAAA,EAAA,IAMRU,gBAAAA,EAAA;AAAA,IAAC;AAAA,IAAA;AAAA,MACG,IAAG;AAAA,MACH,KAAAR;AAAA,MACA,WAAU;AAAA,MAEV,UAAAU,gBAAAA,EAAA,KAAC,OAAI,EAAA,WAAU,+BACX,UAAA;AAAA,QAAAF,gBAAAA,MAAC,SAAI,OAAO;AAAA,UACR,OAAOT,EAAM;AAAA,QACjB,GAAG,WAAU,4CACT,UAAAS,gBAAAA,EAAA,IAAC,QAAG,WAAU,qBAAoB,gCAAkB,EACxD,CAAA;AAAA,QACAA,gBAAAA,EAAA;AAAA,UAAC;AAAA,UAAA;AAAA,YACG,IAAG;AAAA,YACH,WAAU;AAAA,YAET,YAAK,IAAI,CAACG,GAA+BC,MACtCF,gBAAAA,EAAA,KAAC,SAAY,OAAO;AAAA,cAChB,iBAAiBX,EAAM;AAAA,cACvB,OAAOA,EAAM;AAAA,YAAA,GACd,WAAU,kGACT,UAAA;AAAA,cAACW,gBAAAA,EAAAA,KAAA,OAAA,EAAI,WAAU,qBACX,UAAA;AAAA,gBAACF,gBAAAA,EAAAA,IAAA,OAAA,EAAI,WAAW,wBAAwBG,EAAW,kBAAkB,aAAa,iBAAiB,YAAY,IAAK,CAAA;AAAA,gBACpHH,gBAAAA,MAAC,OAAE,OAAO;AAAA,kBACN,OAAOT,EAAM;AAAA,gBACd,GAAA,WAAU,gBAAgB,UAAAY,EAAW,MAAM,CAAA;AAAA,cAAA,GAClD;AAAA,cACCH,gBAAAA,EAAA,IAAA,KAAA,EAAE,WAAU,WAAW,YAAW,eAAc;AAAA,YAAA,EAAA,GAV3CI,CAWV,CACH;AAAA,UAAA;AAAA,QACL;AAAA,MAAA,GACJ;AAAA,IAAA;AAAA,EAAA;AAGZ,CAAC,GAEKC,IAA2BC,EAAKnB,CAAgB;"}