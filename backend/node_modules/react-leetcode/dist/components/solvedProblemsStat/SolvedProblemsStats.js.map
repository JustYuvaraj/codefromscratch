{"version":3,"file":"SolvedProblemsStats.js","sources":["../../../src/components/solvedProblemsStat/SolvedProblemsStats.tsx"],"sourcesContent":["import { forwardRef, memo, useCallback } from \"react\";\r\nimport '../../index.css';\r\nimport { useFetch } from \"../../hooks\"\r\nimport leetcodeQuery from \"../../utils/leetcodeQuery\";\r\nimport { SubmitStats } from \"../../types\";\r\nimport LoadingOrError from \"../LoadingOrError\";\r\nimport OverallProgress from \"./OverallProgress\";\r\n\r\nexport type Props = {\r\n    userName: string,\r\n    loadingComponent?: React.ReactNode,\r\n    theme?: {\r\n        primaryColor?: string;\r\n        secondaryColor?: string;\r\n        bgColor?: string;\r\n    },\r\n    showUserName?: boolean;\r\n}\r\n\r\n\r\n/**\r\n * Component for displaying statistics of solved problems by a user.\r\n * @param {object} props - The props object.\r\n * @param {React.Ref<HTMLDivElement>} ref - The ref to attach to the component's root element.\r\n * @param {string} props.userName - The username of the user.\r\n * @param {React.ReactNode} [props.loadingComponent] - Custom loading component to be displayed.\r\n * @param {object} [props.theme] - An object containing custom theme colors.\r\n * @param {string} [props.theme.primaryColor=\"rgba(34,211,238,1)\"] - The primary color.\r\n * @param {string} [props.theme.secondaryColor=\"rgba(209,213,219,1)\"] - The secondary color.\r\n * @param {string} [props.theme.bgColor=\"rgba(68,64,60,1)\"] - The background color.\r\n * @param {boolean} [props.showUserName=true] - Flag indicating whether to show the user's name.\r\n * @returns {JSX.Element} The JSX element representing the solved problems statistics.\r\n */\r\nconst SolvedProblemsStats = forwardRef<HTMLDivElement, Props>(({\r\n    userName,\r\n    loadingComponent,\r\n    theme = {\r\n        primaryColor: \"rgba(34,211,238,1)\",\r\n        secondaryColor: \"rgba(209,213,219,1)\",\r\n        bgColor: \"rgba(68,64,60,1)\"\r\n    },\r\n    showUserName = true\r\n}, ref) => {\r\n\r\n    const fetchData = useCallback(() => {\r\n        return leetcodeQuery.fetchUserSolvedProblemsStats(userName);\r\n    }, [userName])\r\n\r\n    const { data, loading: isLoading, error } = useFetch<SubmitStats>(fetchData);\r\n\r\n    if (isLoading || error || !data) {\r\n        return (\r\n            <LoadingOrError\r\n                loading={isLoading}\r\n                error={error}\r\n                loadingComponent={loadingComponent}\r\n            />\r\n        )\r\n    }\r\n\r\n\r\n    const [totalQuestions, ...difficultyWiseTotal] = data?.allQuestionsCount || [];\r\n    const [totalSolved, ...sectionWiseSolved] = data?.acSubmissionNum || [];\r\n\r\n\r\n    const getColor = {\r\n        \"Easy\": \"bg-green-600\",\r\n        \"Medium\": \"bg-amber-300\",\r\n        \"Hard\": \"bg-red-500\"\r\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\r\n    } as any;\r\n\r\n    return (\r\n        <div\r\n            id=\"solved_problems_stats_container\"\r\n            ref={ref}\r\n            className=\"w-full flex flex-col items-center rounded-xl px-4 py-2 gap-2\"\r\n            style={{ background: theme.bgColor }}\r\n        >\r\n\r\n            <div id=\"solved_problems_stats_label\" className=\"w-full flex justify-between p-3\">\r\n                <span className=\"text-sm font-semibold\" style={{ color: theme.secondaryColor }}>{showUserName ? userName : \"Solved Problems\"}</span>\r\n                {showUserName && <span className=\"text-sm font-semibold pr-1\" style={{ color: theme.secondaryColor }}>{\"#\" + data.rank}</span>}\r\n            </div>\r\n\r\n            <div id=\"solved_problems_stats_progress_deails\" className=\"w-full flex justify-between items-center\">\r\n                <OverallProgress\r\n                    totalQuestions={totalQuestions.count!}\r\n                    totalSolved={totalSolved.count!}\r\n                    primaryColor=\"#fff\"\r\n                />\r\n\r\n                <div id=\"linear_progress_container\" className=\"w-full\">\r\n                    {\r\n                        difficultyWiseTotal.map((difficulty, index) => {\r\n                            const section = sectionWiseSolved[index];\r\n                            const total = difficulty.count!;\r\n                            const solved = section.count!;\r\n                            const percentage = (solved / total) * 100;\r\n\r\n                            return (\r\n                                <div id={`progress_bar_${difficulty.difficulty}`} key={difficulty.difficulty} className=\"progress_bar mt-3 first:mt-0 w-full\">\r\n                                    <div className=\"flex justify-between px-1\">\r\n                                        <span className=\"text-sm\" style={{ color: theme?.secondaryColor }}>{difficulty.difficulty}</span>\r\n                                        <span className=\"w-[4.5rem] text-end\">\r\n                                            <span className=\"font-semibold\" style={{ color: theme.primaryColor }}>{section.count}</span>\r\n                                            <span className=\"text-xs pb-2\" style={{ color: theme.secondaryColor }}>{\" /\" + difficulty.count}</span>\r\n                                        </span>\r\n                                    </div>\r\n                                    <div className={`${getColor[difficulty.difficulty]} progress_label bg-opacity-20 w-full  rounded-full h-2 dark:bg-gray-700`}>\r\n                                        <div style={{ width: `${percentage}%` }}>\r\n                                            <div className={`${getColor[difficulty.difficulty]} animate-slide h-2 rounded-full dark:bg-blue-500`} />\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n                            )\r\n                        })\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nconst MemoizedSolvedProblemsStats = memo(SolvedProblemsStats);\r\n\r\nexport default MemoizedSolvedProblemsStats;"],"names":["SolvedProblemsStats","forwardRef","userName","loadingComponent","theme","showUserName","ref","fetchData","useCallback","leetcodeQuery","data","isLoading","error","useFetch","jsx","LoadingOrError","totalQuestions","difficultyWiseTotal","totalSolved","sectionWiseSolved","getColor","jsxs","OverallProgress","difficulty","index","section","total","percentage","MemoizedSolvedProblemsStats","memo"],"mappings":"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"}